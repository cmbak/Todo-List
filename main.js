(()=>{"use strict";class e{constructor(e){this.projectName=e,this.todos=[]}static addTodo=(e,t)=>{e.todos.push(t)};static removeTodo=(e,t)=>{e.todos=e.todos.filter((e=>e.title!=t))};static todoExists=(e,t)=>{for(const o of e.todos)if(o.title==t)return!0;return!1}}const t=()=>null!==localStorage.getItem("projects")&&localStorage.getItem("projects").length>0,o=()=>{if(t())return JSON.parse(localStorage.getItem("projects")).map((e=>e.projectName))},n=e=>JSON.parse(localStorage.getItem("projects")).find((t=>t.projectName==e)),d=e=>{const t=JSON.parse(localStorage.getItem("projects"));t.forEach((o=>{o.projectName==e.projectName&&(t[t.indexOf(o)]=e)})),localStorage.setItem("projects",JSON.stringify(t))};class r{constructor(e,t,o,n){this.title=e,this.description=t,this.dueDate=o,this.priority=n,this.completed=!1}}document.getElementById("cancel").addEventListener("click",s);const a=document.getElementById("create-project-btn");a.addEventListener("click",(e=>{e.preventDefault(),s()})),document.getElementById("add-project-btn").addEventListener("click",(()=>{const n=document.getElementById("project-input").value;return""==n?(alert("Sorry, please enter a valid project name"),!1):(e=>!!t()&&o().includes(e))(n)?(alert("Sorry, a project with that name already exists!"),!1):(s(),(o=>{if(t()){let t=JSON.parse(localStorage.getItem("projects"));t.push(new e(o)),localStorage.setItem("projects",JSON.stringify(t))}else localStorage.setItem("projects",JSON.stringify([new e(o)]))})(n),void u(n))}));const c=t=>{const o=(e=>{let t;return JSON.parse(localStorage.getItem("projects")).forEach((o=>{o.projectName==e&&(t=o.todos)})),t})(t),n=document.getElementById("todos");n.innerHTML="",o.forEach((o=>{const r=document.createElement("div"),a=document.createElement("button");r.classList.add("todo-item"),a.innerText="Delete Todo",a.classList.add("delete-todo-btn"),a.addEventListener("click",(()=>{((t,o)=>{const n=JSON.parse(localStorage.getItem("projects"));for(const r of n)if(r.projectName==t)return e.removeTodo(r,o),void d(r)})(t,o.title),c(t)})),r.innerHTML=`\n            <h3 class="todo-title priority-${o.priority}">${o.title}</h3>\n            <p class="todo-desc">${o.description}</p>\n            <p class="todo-date">Due: ${o.dueDate}</p>\n        `,r.appendChild(a),n.appendChild(r)}))},l=()=>{if(t()){const e=o();i(),e.forEach((e=>{u(e)}))}},i=()=>{const e=document.getElementById("projects");for(;e.firstChild;)e.removeChild(e.firstChild)};function s(){m(),p()}const m=()=>{a.classList.toggle("hidden")},p=()=>{document.getElementById("add-project-form").classList.toggle("hidden"),document.getElementById("project-input").value=""},u=e=>{const t=document.getElementById("projects"),o=document.createElement("li"),n=document.createElement("button"),d=document.createElement("div"),r=document.createTextNode(e);e==localStorage.getItem("activeProject")&&f(e,n),n.classList.add("project-name-btn"),n.addEventListener("click",(()=>f(e,n))),o.classList.add("project-name"),o.appendChild(n),d.classList.add("project-container"),d.appendChild(o),d.appendChild(g(e)),n.appendChild(r),t.appendChild(d)},g=e=>{const o=document.createElement("form"),n=document.createElement("button");return o.appendChild(n),n.innerText="Delete",n.value=e,n.classList.add("delete-project-btn"),n.addEventListener("click",(o=>{o.preventDefault(),(e=>{if(t()){const t=JSON.parse(localStorage.getItem("projects")).filter((t=>t.projectName!=e));localStorage.setItem("projects",JSON.stringify(t))}})(e),h(),document.getElementById("todo-container").innerHTML="",l()})),o},f=(e,t)=>{h(),t.classList.toggle("active-project"),E(e),(e=>{localStorage.setItem("activeProject",e)})(e),c(e)},h=()=>{Array.prototype.forEach.call(document.getElementsByClassName("project-name-btn"),(e=>{e.classList.remove("active-project")}))},E=t=>{document.getElementById("todo-container").innerHTML=`\n        <div id="todos"></div>\n        <button id="create-todo-btn">Create Todo</button>\n        <form id="create-todo-form" class="hidden">\n            <label for="todo-form-title">Todo Name</label>\n            <input type="text" name="title" id="todo-form-title" placeholder="Name of todo" required>\n            <label for="todo-form-desc">Description</label>\n            <textarea name="desc" id="todo-form-desc" cols="30" rows="10" placeholder="Optional description..."></textarea>\n            <label for="todo-priority">Priority</label>\n            <select name="priority" id="todo-priority" required>\n                <option value="low">Low</option>\n                <option value="medium">Medium</option>\n                <option value="high">High</option>\n            </select>\n            <label for="todo-date-input">Due Date</label>\n            <input type="date" name="due-date" id="todo-date-input" required>\n            <button type="submit" id="add-todo-btn" value="${t}">Create Todo</button>\n            <button id="add-todo-cancel-btn" class="delete-todo-btn">Cancel</button>\n        </form>\n    `;const o=document.getElementById("create-todo-form");o.addEventListener("submit",(a=>{if(a.preventDefault(),e.todoExists(n(t),new FormData(o).get("title")))return alert("Sorry, a todo with this name already exists!"),!1;((t,o)=>{const a=new FormData(t);((t,o)=>{const r=n(o);e.addTodo(r,t),d(r)})(new r(a.get("title"),a.get("desc"),a.get("due-date"),a.get("priority")),o)})(o,t),c(t),o.reset(),j()})),document.getElementById("create-todo-btn").addEventListener("click",(e=>{e.preventDefault(),j()})),document.getElementById("add-todo-cancel-btn").addEventListener("click",(e=>{e.preventDefault(),j()}))},j=()=>{const e=document.getElementById("create-todo-btn"),t=document.getElementById("create-todo-form");e.classList.toggle("hidden"),t.classList.toggle("hidden")};l()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,